def func5(arg45, arg46):
    var59 = func9()
    var64 = func10(arg46, arg45)
    var65 = -1346396542 ^ (arg46 + 41367217)
    var66 = (var65 | arg46 - var64) & -611
    var67 = 1723529373 | (var65 & arg45) ^ arg45
    if var64 < var67:
        var68 = var64 - 895 + var66
    else:
        var68 = (var59 | arg45) - var59 ^ arg46
    var69 = var66 | ((807 + 1172335566) + arg45)
    var70 = -856 & var67
    var71 = (var65 ^ (var70 ^ var64)) | arg45
    var72 = (var70 - (275946162 & var65)) + var69
    var73 = var70 - var59
    var74 = var73 | var65 ^ var72
    var75 = (var74 + var71 ^ var66) - var65
    var76 = var72 + var69
    var77 = (var70 ^ (var76 + var75)) | 1653756571
    var78 = ((var69 ^ var73) | var75) + var69
    var79 = var66 ^ (var70 | (var70 - arg45))
    var80 = var67 - var78
    var81 = (var65 & -602) & var79 ^ var67
    var82 = var80 & (var75 + var76)
    var83 = var66 + (arg46 ^ var69) & var77
    var84 = ((-839 ^ -1755696219) & var83) ^ var70
    var85 = var74 - var79 | var80 | var76
    result = var85 + var83
    return result
def func10(arg60, arg61):
    var62 = 0
    for var63 in range(42):
        var62 += var63 & arg61 & var62
    return var62
def func9():
    func6()
    result = len(func8(-7, -8))
    func7()
    return result
def func8(arg47, arg48):
    var49 = arg47 + arg47 - (arg47 ^ 837705692)
    yield var49
    var50 = 2048745877 ^ -579
    yield var50
    var51 = var50 & var50 ^ (510970511 - var49)
    yield var51
    var52 = (var49 & var51 ^ var50) & var51
    yield var52
    var53 = 88 & var50
    yield var53
    var54 = var50 | 1021968319 | arg48
    yield var54
    var55 = (-1013679421 + var53 ^ -912) ^ var54
    yield var55
    var56 = (var50 | (-468 | arg48)) & var49
    yield var56
    var57 = (var52 + var53 - var49) - arg48
    yield var57
    var58 = var50 + ((var49 + var50) & arg47)
    yield var58
def func7():
    global len
    del len
def func6():
    global len
    len = lambda x : -2
def func3(arg13, arg14):
    var19 = func4(arg13, arg14)
    var20 = (arg14 & 1653569603) | arg14
    var21 = arg14 + var20 ^ var20
    var22 = var20 & -970 ^ var21 ^ var20
    if arg13 < arg13:
        var23 = (-875 | var20 & var20) + -84312971
    else:
        var23 = var22 + arg13
    var24 = arg14 - 655 & var19 - var22
    var25 = var20 ^ var24
    var26 = arg13 ^ var22 | var22 & var24
    var27 = var26 ^ var25 ^ 1549306423 ^ var26
    var28 = var26 - var27
    var29 = var24 ^ (var27 | 228490404)
    var30 = var26 ^ var22
    var31 = var26 ^ var19
    var32 = (var22 & var19) - arg13 + var31
    var33 = var27 + (var27 ^ var27)
    if var21 < arg13:
        var34 = var29 | var22
    else:
        var34 = var20 & var28
    var35 = var22 ^ var31
    var36 = var19 - arg14
    var37 = (var32 ^ var35) | var20
    var38 = var28 + var20 + (var35 ^ var25)
    var39 = (var20 ^ -1721373794) + var36
    var40 = var20 | arg14 & (var30 & var38)
    var41 = var20 + var30
    var42 = (var37 ^ 456 + var27) & var29
    if var35 < var39:
        var43 = var29 | (var21 & var41 + var40)
    else:
        var43 = arg13 + var40
    var44 = (arg14 + var21 & var41) | var31
    result = (var36 | (var21 + (arg14 - var30 ^ arg13 ^ var39) - var22 ^ var29)) + var19 ^ 333 ^ var20 & var44
    return result
def func4(arg15, arg16):
    var17 = 0
    for var18 in range(5):
        var17 += (arg16 | arg15) + arg15
    return var17
def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var8 = arg2 & (-416 - arg1 & arg1 - -984)
    var9 = (var7 - (((-467 + (arg2 & var7) ^ (var8 - (var7 + (var8 - arg1 & arg2) + arg2) + (arg2 - var7))) + ((arg2 ^ var8) | -1701621363 & ((arg2 + var7) | var8)) ^ arg2) + var8)) + var8 & arg2
    var10 = arg1 ^ var9
    var11 = var10 & var9 + var7 ^ (arg1 + var7)
    var12 = (arg2 & (arg1 ^ 191 + 236 | (var8 | -17) ^ arg1)) ^ var9 + var8 & var11 & var7 & var11 & var9
    result = (var9 | 393 - var11 ^ var12 ^ var7 | (-775 & var8 - var9) + var7) | -222
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(23):
        var5 += var5 ^ var6 | 1
    return var5
if __name__ == "__main__":
    print 'prog_size: 1'
    print 'func_number: 3'
    print 'arg_number: 13'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 2'
    print 'func_number: 5'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func3(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 86'
    for i in xrange(25000):
        x = 5
        x = func5(x, i)
        print x,
